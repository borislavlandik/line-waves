(()=>{"use strict";var __webpack_modules__={127:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval("\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(477);\n// EXTERNAL MODULE: ./node_modules/stats.js/build/stats.min.js\nvar stats_min = __webpack_require__(466);\nvar stats_min_default = /*#__PURE__*/__webpack_require__.n(stats_min);\n;// CONCATENATED MODULE: ./src/scripts/canvas-3d/base-renderer.ts\n\n\nclass BaseRenderer {\n    constructor(canvasId, transparent = false) {\n        this.camera = {};\n        this.stats = new (stats_min_default())();\n        const canvas = document.getElementById(canvasId);\n        this.renderer = new three_module/* WebGLRenderer */.CP7({\n            canvas,\n            antialias: true,\n            alpha: transparent,\n        });\n        this.scene = new three_module/* Scene */.xsS();\n        this.createCamera(canvas.clientWidth, canvas.clientHeight);\n        this.renderer.render(this.scene, this.camera);\n        this.stats.showPanel(0);\n        document.body.appendChild(this.stats.dom);\n    }\n    resizeRendererToDisplaySize() {\n        const canvas = this.renderer.domElement;\n        const pixelRatio = window.devicePixelRatio;\n        const width = (canvas.clientWidth * pixelRatio) | 0;\n        const height = (canvas.clientHeight * pixelRatio) | 0;\n        const needResize = canvas.width !== width || canvas.height !== height;\n        if (needResize) {\n            this.renderer.setSize(width, height, false);\n        }\n        return needResize;\n    }\n    renderAnimationFrame(time) {\n        if (this.resizeRendererToDisplaySize()) {\n            const canvas = this.renderer.domElement;\n            if (this.camera instanceof three_module/* PerspectiveCamera */.cPb) {\n                this.camera.aspect = canvas.clientWidth / canvas.clientHeight;\n                this.camera.updateProjectionMatrix();\n            }\n            if (this.camera instanceof three_module/* OrthographicCamera */.iKG) {\n                const camFactor = 50;\n                this.camera.left = -window.innerWidth / camFactor;\n                this.camera.right = window.innerWidth / camFactor;\n                this.camera.top = window.innerHeight / camFactor;\n                this.camera.bottom = -window.innerHeight / camFactor;\n                this.camera.updateProjectionMatrix();\n            }\n        }\n        this.stats.begin();\n        this.render(time);\n        this.renderer.render(this.scene, this.camera);\n        this.stats.end();\n        requestAnimationFrame((time) => this.renderAnimationFrame(time));\n    }\n    startAnimation() {\n        requestAnimationFrame((time) => this.renderAnimationFrame(time));\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/simplex-noise/dist/esm/simplex-noise.js\nvar simplex_noise = __webpack_require__(48);\n// EXTERNAL MODULE: ./node_modules/dat.gui/build/dat.gui.module.js\nvar dat_gui_module = __webpack_require__(376);\n;// CONCATENATED MODULE: ./src/scripts/canvas-3d/noise-lines.ts\n\n\n\n\nclass NoiseLinesRenderer extends BaseRenderer {\n    constructor(canvasId) {\n        super(canvasId, true);\n        this.lineArr = [];\n        this.lineNum = 120;\n        this.lineLength = 500;\n        this.segmentNum = 350;\n        this.amplitude = 38;\n        this.padding = 2;\n        this.noise = (0,simplex_noise/* createNoise2D */.hA)();\n        this.createLines();\n        const gui = new dat_gui_module/* default.GUI */.ZP.GUI({ name: 'Lines settings' });\n        const lineNumController = gui.add(this, 'lineNum', 10, 500);\n        lineNumController.onChange(() => this.createLines());\n        gui.add(this, 'lineLength', 10, 1000);\n        gui.add(this, 'segmentNum', 10, 1000);\n        gui.add(this, 'amplitude', 1, 100);\n        const params = { backgroundColor: '#ffffff' };\n        gui.addColor(params, 'backgroundColor').onChange(value => {\n            document.body.style.backgroundColor = value;\n        });\n        const paddingController = gui.add(this, 'padding', 0.001, 10, 0.001);\n        paddingController.onChange(() => this.createLines());\n        const cameraRotation = gui.addFolder('Camera rotation');\n        cameraRotation.add(this.camera.rotation, 'x', 0, 6.28, 0.01);\n        cameraRotation.add(this.camera.rotation, 'y', 0, 6.28, 0.01);\n        cameraRotation.add(this.camera.rotation, 'z', 0, 6.28, 0.01);\n        const cameraPosition = gui.addFolder('Camera position');\n        cameraPosition.add(this.camera.position, 'x', -1000, 1000);\n        cameraPosition.add(this.camera.position, 'y', -1000, 1000);\n        cameraPosition.add(this.camera.position, 'z', -1000, 1000);\n        this.startAnimation();\n    }\n    createCamera(width, height) {\n        this.camera = new three_module/* PerspectiveCamera */.cPb(45, width / height, 1, 3000);\n        this.camera.rotation.z = 0.45;\n        this.camera.position.y = 0;\n        this.camera.position.z = 350;\n    }\n    render(time) {\n        for (let i = 0; i < this.lineNum; i++) {\n            const line = this.lineArr[i];\n            const positions = line.geometry.attributes.position\n                .array;\n            for (let j = 0; j <= this.segmentNum; j++) {\n                const x = (this.lineLength / this.segmentNum) * j - this.lineLength / 2;\n                const px = j / (50 + i);\n                const py = i / 50 + time / 10000;\n                const y = this.amplitude * this.noise(px, py);\n                const z = i * this.padding - 2;\n                positions[j * 3] = x;\n                positions[j * 3 + 1] = y;\n                positions[j * 3 + 2] = z;\n            }\n            line.geometry.attributes.position.needsUpdate = true;\n        }\n    }\n    createLines() {\n        this.scene.clear();\n        for (let i = 0; i < this.lineNum; i++) {\n            const points = [];\n            for (let j = 0; j <= this.segmentNum; j++) {\n                const x = (this.lineLength / this.segmentNum) * j - this.lineLength / 2;\n                const y = 0;\n                const z = i * this.padding - 2;\n                const p = new three_module/* Vector3 */.Pa4(x, y, z);\n                points.push(p);\n            }\n            const geometry = new three_module/* BufferGeometry */.u9r().setFromPoints(points);\n            const material = new three_module/* LineBasicMaterial */.nls({\n                color: 0x80A6FF,\n            });\n            const line = new three_module/* Line */.x12(geometry, material);\n            this.lineArr[i] = line;\n            this.scene.add(this.lineArr[i]);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/scripts/main.ts\n\n// const fontRenderer = new FontRenderer(\"main-canvas\");\n// fontRenderer.startAnimation();\n// document.addEventListener(\"click\", () => {\n//   fontRenderer.switchColorScheme();\n// });\n// const renderer = new LinesTerrainRenderer(\"main-canvas\");\nconst renderer = new NoiseLinesRenderer(\"main-canvas\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///127\n")}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var U=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(U.exports,U,U.exports,__webpack_require__),U.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,F,U,B)=>{if(!F){var s=1/0;for(t=0;t<deferred.length;t++){for(var[F,U,B]=deferred[t],e=!0,n=0;n<F.length;n++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](F[n])))?F.splice(n--,1):(e=!1,B<s&&(s=B));if(e){deferred.splice(t--,1);var c=U();void 0!==c&&(Q=c)}}return Q}B=B||0;for(var t=deferred.length;t>0&&deferred[t-1][2]>B;t--)deferred[t]=deferred[t-1];deferred[t]=[F,U,B]},__webpack_require__.n=Q=>{var F=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(F,{a:F}),F},__webpack_require__.d=(Q,F)=>{for(var U in F)__webpack_require__.o(F,U)&&!__webpack_require__.o(Q,U)&&Object.defineProperty(Q,U,{enumerable:!0,get:F[U]})},__webpack_require__.o=(Q,F)=>Object.prototype.hasOwnProperty.call(Q,F),(()=>{var Q={179:0};__webpack_require__.O.j=F=>0===Q[F];var F=(F,U)=>{var B,s,[e,n,c]=U,t=0;if(e.some((F=>0!==Q[F]))){for(B in n)__webpack_require__.o(n,B)&&(__webpack_require__.m[B]=n[B]);if(c)var a=c(__webpack_require__)}for(F&&F(U);t<e.length;t++)s=e[t],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(a)},U=self.webpackChunkheader_3d_symbols=self.webpackChunkheader_3d_symbols||[];U.forEach(F.bind(null,0)),U.push=F.bind(null,U.push.bind(U))})();var __webpack_exports__=__webpack_require__.O(void 0,[813,637,519,474],(()=>__webpack_require__(127)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();