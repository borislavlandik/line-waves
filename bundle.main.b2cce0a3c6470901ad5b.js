(()=>{"use strict";var __webpack_modules__={127:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{eval('\n// EXTERNAL MODULE: ./node_modules/three/build/three.module.js\nvar three_module = __webpack_require__(477);\n// EXTERNAL MODULE: ./node_modules/three/examples/jsm/controls/OrbitControls.js\nvar OrbitControls = __webpack_require__(365);\n// EXTERNAL MODULE: ./node_modules/stats.js/build/stats.min.js\nvar stats_min = __webpack_require__(466);\nvar stats_min_default = /*#__PURE__*/__webpack_require__.n(stats_min);\n;// CONCATENATED MODULE: ./src/scripts/canvas-3d/base-renderer.ts\n\n\nclass BaseRenderer {\n    constructor(canvasId, transparent = false) {\n        this.camera = {};\n        this.stats = new (stats_min_default())();\n        const canvas = document.getElementById(canvasId);\n        this.renderer = new three_module/* WebGLRenderer */.CP7({\n            canvas,\n            antialias: true,\n            alpha: transparent,\n        });\n        this.scene = new three_module/* Scene */.xsS();\n        this.createCamera(canvas.clientWidth, canvas.clientHeight);\n        this.renderer.render(this.scene, this.camera);\n        this.stats.showPanel(0);\n        document.body.appendChild(this.stats.dom);\n    }\n    resizeRendererToDisplaySize() {\n        const canvas = this.renderer.domElement;\n        const pixelRatio = window.devicePixelRatio;\n        const width = (canvas.clientWidth * pixelRatio) | 0;\n        const height = (canvas.clientHeight * pixelRatio) | 0;\n        const needResize = canvas.width !== width || canvas.height !== height;\n        if (needResize) {\n            this.renderer.setSize(width, height, false);\n        }\n        return needResize;\n    }\n    renderAnimationFrame(time) {\n        if (this.resizeRendererToDisplaySize()) {\n            const canvas = this.renderer.domElement;\n            if (this.camera instanceof three_module/* PerspectiveCamera */.cPb) {\n                this.camera.aspect = canvas.clientWidth / canvas.clientHeight;\n                this.camera.updateProjectionMatrix();\n            }\n            if (this.camera instanceof three_module/* OrthographicCamera */.iKG) {\n                const camFactor = 50;\n                this.camera.left = -window.innerWidth / camFactor;\n                this.camera.right = window.innerWidth / camFactor;\n                this.camera.top = window.innerHeight / camFactor;\n                this.camera.bottom = -window.innerHeight / camFactor;\n                this.camera.updateProjectionMatrix();\n            }\n        }\n        this.stats.begin();\n        this.render(time);\n        this.renderer.render(this.scene, this.camera);\n        this.stats.end();\n        requestAnimationFrame((time) => this.renderAnimationFrame(time));\n    }\n    startAnimation() {\n        requestAnimationFrame((time) => this.renderAnimationFrame(time));\n    }\n}\n\n// EXTERNAL MODULE: ./node_modules/simplex-noise/dist/esm/simplex-noise.js\nvar simplex_noise = __webpack_require__(48);\n// EXTERNAL MODULE: ./node_modules/dat.gui/build/dat.gui.module.js\nvar dat_gui_module = __webpack_require__(376);\n;// CONCATENATED MODULE: ./src/scripts/canvas-3d/noise-lines.ts\n\n\n\n\n\nclass NoiseLinesRenderer extends BaseRenderer {\n    constructor(canvasId) {\n        super(canvasId, true);\n        this.lineArr = [];\n        this.lineNum = 120;\n        this.lineLength = 500;\n        this.segmentNum = 350;\n        this.amplitude = 38;\n        this.padding = 2;\n        this.speed = 10000;\n        this.mouseControls = false;\n        this.noise = (0,simplex_noise/* createNoise2D */.hA)();\n        this.gui = new dat_gui_module/* default.GUI */.ZP.GUI({ name: "Lines settings" });\n        this.createLines();\n        this.gui.add(this, "lineNum", 10, 500).onChange(() => this.createLines());\n        this.gui.add(this, "lineLength", 10, 1000);\n        this.gui\n            .add(this, "segmentNum", 10, 1000)\n            .onChange(() => this.createLines());\n        this.gui.add(this, "amplitude", 1, 100);\n        this.gui.add(this, "speed", 1000, 50000, 100);\n        this.gui\n            .add(this, "mouseControls")\n            .onChange((value) => (this.controls.enabled = value));\n        const params = { backgroundColor: "#ffffff" };\n        this.gui.addColor(params, "backgroundColor").onChange((value) => {\n            document.body.style.backgroundColor = value;\n        });\n        this.gui\n            .add(this, "padding", 0.001, 10, 0.001)\n            .onChange(() => this.createLines());\n        const cameraRotation = this.gui.addFolder("Camera rotation");\n        cameraRotation.add(this.camera.rotation, "x", 0, 6.28, 0.01);\n        cameraRotation.add(this.camera.rotation, "y", 0, 6.28, 0.01);\n        cameraRotation.add(this.camera.rotation, "z", 0, 6.28, 0.01);\n        const cameraPosition = this.gui.addFolder("Camera position");\n        cameraPosition.add(this.camera.position, "x", -1000, 1000);\n        cameraPosition.add(this.camera.position, "y", -1000, 1000);\n        cameraPosition.add(this.camera.position, "z", -1000, 1000);\n        const cameraParam = this.gui.addFolder("Camera params");\n        cameraParam\n            .add(this.camera, "aspect", 0, 10)\n            .onChange(() => this.camera.updateProjectionMatrix());\n        cameraParam\n            .add(this.camera, "fov", 1, 180)\n            .onChange(() => this.camera.updateProjectionMatrix());\n        cameraParam\n            .add(this.camera, "near", 0, 100)\n            .onChange(() => this.camera.updateProjectionMatrix());\n        cameraParam\n            .add(this.camera, "far", 0, 10000)\n            .onChange(() => this.camera.updateProjectionMatrix());\n        this.startAnimation();\n    }\n    createCamera(width, height) {\n        this.camera = new three_module/* PerspectiveCamera */.cPb(15, width / height, 1, 3000);\n        this.controls = new OrbitControls/* OrbitControls */.z(this.camera, this.renderer.domElement);\n        this.controls.enabled = false;\n        this.camera.position.set(0, 0, 350);\n        this.camera.rotation.set(0, 0, 0.45);\n    }\n    render(time) {\n        this.controls.update();\n        this.gui.updateDisplay();\n        for (let i = 0; i < this.lineNum; i++) {\n            const line = this.lineArr[i];\n            const positions = line.geometry.attributes.position\n                .array;\n            for (let j = 0; j <= this.segmentNum; j++) {\n                const x = (this.lineLength / this.segmentNum) * j - this.lineLength / 2;\n                const px = j / (50 + i);\n                const py = i / 50 + time / this.speed;\n                const y = this.amplitude * this.noise(px, py);\n                const z = i * this.padding - 2;\n                positions[j * 3] = x;\n                positions[j * 3 + 1] = y;\n                positions[j * 3 + 2] = z;\n            }\n            line.geometry.attributes.position.needsUpdate = true;\n        }\n    }\n    createLines() {\n        this.scene.clear();\n        for (let i = 0; i < this.lineNum; i++) {\n            const points = [];\n            for (let j = 0; j <= this.segmentNum; j++) {\n                const x = (this.lineLength / this.segmentNum) * j - this.lineLength / 2;\n                const y = 0;\n                const z = i * this.padding - 2;\n                const p = new three_module/* Vector3 */.Pa4(x, y, z);\n                points.push(p);\n            }\n            const geometry = new three_module/* BufferGeometry */.u9r().setFromPoints(points);\n            const material = new three_module/* LineBasicMaterial */.nls({\n                color: 0x80a6ff,\n            });\n            const line = new three_module/* Line */.x12(geometry, material);\n            this.lineArr[i] = line;\n            this.scene.add(this.lineArr[i]);\n        }\n    }\n}\n\n;// CONCATENATED MODULE: ./src/scripts/main.ts\n\n// const fontRenderer = new FontRenderer("main-canvas");\n// fontRenderer.startAnimation();\n// document.addEventListener("click", () => {\n//   fontRenderer.switchColorScheme();\n// });\n// const renderer = new LinesTerrainRenderer("main-canvas");\nconst renderer = new NoiseLinesRenderer("main-canvas");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///127\n')}},__webpack_module_cache__={},deferred;function __webpack_require__(Q){var U=__webpack_module_cache__[Q];if(void 0!==U)return U.exports;var F=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q].call(F.exports,F,F.exports,__webpack_require__),F.exports}__webpack_require__.m=__webpack_modules__,deferred=[],__webpack_require__.O=(Q,U,F,B)=>{if(!U){var s=1/0;for(n=0;n<deferred.length;n++){for(var[U,F,B]=deferred[n],e=!0,c=0;c<U.length;c++)(!1&B||s>=B)&&Object.keys(__webpack_require__.O).every((Q=>__webpack_require__.O[Q](U[c])))?U.splice(c--,1):(e=!1,B<s&&(s=B));if(e){deferred.splice(n--,1);var i=F();void 0!==i&&(Q=i)}}return Q}B=B||0;for(var n=deferred.length;n>0&&deferred[n-1][2]>B;n--)deferred[n]=deferred[n-1];deferred[n]=[U,F,B]},__webpack_require__.n=Q=>{var U=Q&&Q.__esModule?()=>Q.default:()=>Q;return __webpack_require__.d(U,{a:U}),U},__webpack_require__.d=(Q,U)=>{for(var F in U)__webpack_require__.o(U,F)&&!__webpack_require__.o(Q,F)&&Object.defineProperty(Q,F,{enumerable:!0,get:U[F]})},__webpack_require__.o=(Q,U)=>Object.prototype.hasOwnProperty.call(Q,U),(()=>{var Q={179:0};__webpack_require__.O.j=U=>0===Q[U];var U=(U,F)=>{var B,s,[e,c,i]=F,n=0;if(e.some((U=>0!==Q[U]))){for(B in c)__webpack_require__.o(c,B)&&(__webpack_require__.m[B]=c[B]);if(i)var L=i(__webpack_require__)}for(U&&U(F);n<e.length;n++)s=e[n],__webpack_require__.o(Q,s)&&Q[s]&&Q[s][0](),Q[s]=0;return __webpack_require__.O(L)},F=self.webpackChunkheader_3d_symbols=self.webpackChunkheader_3d_symbols||[];F.forEach(U.bind(null,0)),F.push=U.bind(null,F.push.bind(F))})();var __webpack_exports__=__webpack_require__.O(void 0,[813,637,519,474],(()=>__webpack_require__(127)));__webpack_exports__=__webpack_require__.O(__webpack_exports__)})();